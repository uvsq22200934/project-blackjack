#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = "Mathilde, Maïlys, Joseph"
__copyright__ = "Copyright 2023, Projet Blacjack"
__credits__ = ["Mathilde", "Maïlys", "Joseph"]
__license__ = "GPL"
__version__ = "0.1.1"
__maintainer__ = "Joseph ARIAS"
__email__ = "joseph.arias@ens.uvsq.fr"
__status__ = "Developement"

import random
import tkinter
from PIL import Image, ImageTk


"""listes et variables"""


"""p = pique, co = coeur, t = trèfle, ca = carreau"""
valeurs = {'2p': 2, '3p': 3, '4p': 4, '5p': 5, '6p': 6, '7p': 7, '8p': 8,
           '9p': 9, '10p': 10, 'Vp': 10, 'Dp': 10, 'Rp': 10, 'Ap': 11,
           '2co': 2, '3co': 3, '4co': 4, '5co': 5, '6co': 6, '7co': 7,
           '8co': 8, '9co': 9, '10co': 10, 'Vco': 10, 'Dco': 10, 'Rco': 10,
           'Aco': 11,
           '2t': 2, '3t': 3, '4t': 4, '5t': 5, '6t': 6, '7t': 7, '8t': 8,
           '9t': 9, '10t': 10, 'Vt': 10, 'Dt': 10, 'Rt': 10, 'At': 11,
           '2ca': 2, '3ca': 3, '4ca': 4, '5ca': 5, '6ca': 6, ' 7ca': 7,
           '8ca': 8, '9ca': 9, '10ca': 10, 'Vca': 10, 'Dca': 10, 'Rca': 10,
           'Aca': 11}

paquet = list(valeurs.keys())*6
defausse = []
main_joueur = []
main_croupier = []
coupe = random.randint(52, len(paquet)-52)

bj21 = 0
money = 0
assurance_prise = 0
assurance_gagnante = 0
prix_assurance = 0
dette = 0

images = dict()
image_dos = dict()

debug = 1
name = ''


"""Fonctions"""


def creer_image(carte, position_carte, texte):
    image_carte = Image.open("./Images/cartes.png")
    if debug == 1:
        print('ok', carte)
    a = 30
    b = 30
    c = 390
    d = 570
    if 'co' in carte:
        b += 570
        d += 570
    if 'ca' in carte:
        b += 570*2
        d += 570*2
    if 't' in carte:
        b += 570*3
        d += 570*3
    for i in range(2, 11):
        if str(i) in carte:
            a += 390 * (i-1)
            c += 390 * (i-1)
    if 'V' in carte:
        a += 390*10
        c += 390*10
    if 'D' in carte:
        a += 390*11
        c += 390*11
    if 'R' in carte:
        a += 390*12
        c += 390*12
    if debug == 1:
        print(a, b, c, d)
    crop_rectangle = (a, b, c, d)
    cropped_im = image_carte.crop(crop_rectangle)
    image_fin = cropped_im.resize((66, 100))
    images[texte] = ImageTk.PhotoImage(image_fin)
    position_carte.create_image(2, 2, anchor='nw', image=images[texte])


def dos_carte(position, texte):
    image_carte = Image.open("./Images/dos_cartes3.jpg")
    image_fin = image_carte.resize((66, 100))
    images[texte] = ImageTk.PhotoImage(image_fin)
    position.create_image(2, 2, anchor='nw', image=images[texte])


def debut(event):
    global name
    global money
    if event.widget == play:
        name = my_entry.get()
        money = my_entry2.get()
        if not money.isnumeric():
            money = ''
        if name == '':
            name = 'Player'
        if money == '':
            money = 1000
        elif money != '':
            money = int(money)
        accueil.destroy()


def fenêtre():
    F1 = tkinter.Toplevel(accueil)


def fenêtre_bis():
    F2 = tkinter.Toplevel(accueil)


def donne_initiale():
    # fonction qui distribue les cartes en début de partie
    global paquet
    global main_joueur
    global main_croupier
    global bj21
    global assurance_prise
    global mise_totale
    disparition_mise()
    bouton_donne_initiale.grid_forget()
    nb_carte = 0
    while nb_carte < 2:
        main_joueur.append(paquet[0])
        del paquet[0]
        nb_paquet['text'] = 'Nombre de cartes restantes dans le paquet:' +\
            f' {str(len(paquet))} \nNombre de cartes restantes dans la' +\
            f'défausse: {str(len(defausse))}'
        main_croupier.append(paquet[0])
        del paquet[0]
        nb_paquet['text'] = 'Nombre de cartes restantes dans le paquet:' +\
            f' {str(len(paquet))} \nNombre de cartes restantes dans la' +\
            f'défausse: {str(len(defausse))}'
        nb_carte += 1
    creer_image(main_joueur[0], cj1, 'cj1')
    root.after(500, root.update())
    creer_image(main_croupier[0], cc1, 'cc1')
    root.after(500, root.update())
    creer_image(main_joueur[1], cj2, 'cj2')
    root.after(500, root.update())
    dos_carte(cc2, 'cc2')
    bj21 = 0
    assurance_prise = 0
    if 'A' in main_croupier[0]:
        prix_assurance = mise_totale // 2
        if money >= prix_assurance:
            texte_assurance['text'] = 'Le Dealer vient de tirer un ' + \
                f'As. Voulez vous payer une assurance ({prix_assurance})?'
            texte_assurance.grid(column=2, row=3)
            bouton_oui_assurance.grid(column=2, row=4)
            bouton_non_assurance.grid(column=2, row=5)
            root.update()
    else:
        if score(main_joueur) == 21:
            bj21 = 1
            croupier()
        else:
            bouton_melanger.grid_forget()
            apparition_bouton_joueur()
    if debug == 1:
        print('main joueur', main_joueur, '\n main croupier', main_croupier)


def reponse_assurance(reponse=0):
    global money
    global assurance_prise
    global bouton_non_assurance
    global bouton_oui_assurance
    global bj21
    global mise_totale
    prix_assurance = mise_totale // 2
    if reponse == 'oui':
        money -= prix_assurance
        assurance_prise = 1
        assurance_valeur['text'] = f'Assurance: {str(prix_assurance)}'
        assurance_valeur.grid(column=0, row=10)
    bouton_non_assurance.grid_forget()
    bouton_oui_assurance.grid_forget()
    texte_assurance.grid_forget()
    argent['text'] = f'Crédits: {str(money)}'
    if score(main_joueur) == 21:
        bj21 = 1
        croupier()
    if bj21 == 0:
        bouton_melanger.grid_forget()
        apparition_bouton_joueur()


def hit(main, pointeur):
    # fonction qui permet à un joueur de piocher un certain nombre de carte
    global main_joueur
    global main_croupier
    global paquet
    if pointeur == 'main_joueur':
        bouton_double_down.grid_forget()
        main.append(paquet[0])
        del paquet[0]
        nb_paquet['text'] = 'Nombre de cartes restantes dans le paquet:' +\
            f' {str(len(paquet))} \nNombre de cartes restantes dans la' +\
            f'défausse: {str(len(defausse))}'
        for i in range(3, 14):
            if len(main) == i:
                creer_image(main[i-1], cj[i-1], f'cj{i}')
                cj[i-1].grid(column=4+i, row=7)
        test_score(main)
    if pointeur == 'main_croupier':
        if debug == 1:
            print(len(main))
        main.append(paquet[0])
        del paquet[0]
        nb_paquet['text'] = 'Nombre de cartes restantes dans le paquet:' +\
            f' {str(len(paquet))} \nNombre de cartes restantes dans la' +\
            f'défausse: {str(len(defausse))}'
        for i in range(3, 14):
            if len(main) == i:
                creer_image(main[i-1], cc[i-1], f'cc{i}')
                cc[i-1].grid(column=4+i, row=1)
    root.update()


def test_score(main):
    if score(main) >= 21:
        croupier()


def disparition_bouton_joueur():
    global bouton_hit
    if debug == 1:
        print("bouton test", bouton_hit.grid_info())
    for i in range(len(bouton_joueur)):
        bouton_joueur[i].grid_forget()


def fin_manche():
    # fonction qui enlève les cartes des mains des joueurs et les place dans
    # la défausse
    global main_croupier
    global main_joueur
    global defausse
    disparition_bouton_joueur()
    while len(main_joueur) != 0:
        defausse.append(main_joueur[0])
        del main_joueur[0]
    while len(main_croupier) != 0:
        defausse.append(main_croupier[0])
        del main_croupier[0]
    if debug == 1:
        print(len(paquet), paquet)
        print('mains croupier ', main_croupier, 'main joueur', main_joueur)
    bouton_rejouer.grid(column=2, row=3)


def score(main):
    # fonction qui permet de calculer la valeur d'une main
    points = 0
    for element in main:
        points += valeurs.get(element)
        if debug == 1:
            print(points, valeurs.get(element), element)
    boucle = 0
    while points > 21:
        if boucle > len(main)-1:
            break
        if 'A' in main[boucle]:
            points -= 10
        boucle += 1
    if debug == 1:
        print('point final', points)
    return points


def croupier():
    # fonction qui définit les action du croupier en fonction de sa main
    global main_croupier
    creer_image(main_croupier[1], cc2, 'cc2')
    cc2.grid(column=3, row=1)
    root.update()
    points_croupier = score(main_croupier)
    while score(main_croupier) <= 16:
        if debug == 1:
            print(points_croupier, main_croupier)
        hit(main_croupier, 'main_croupier')
    if debug == 1:
        print('resultat dans croupier')
    resultat()


def stand(main, bouton=0):
    # fonction qui permet au joueur de "stand"
    stand_label.grid(column=0, row=5)
    if debug == 1:
        print("je m'arrête")
    croupier()


def doubble_down(main):
    # fonction qui permet au joueur de "double down"
    global mise_totale
    global money
    money -= mise_totale
    mise_totale *= 2
    mise_texte['text'] = f"Mise totale: {str(mise_totale)}"
    argent['text'] = f'Crédits: {str(money)}'
    hit(main, 'main_joueur')
    if debug == 1:
        print(main)
    croupier()


def surrender():
    # fonction qui permet au joueur de "surrender"
    resultat(action='surrender')


def resultat(action=0):
    # fonction qui donne le résulat du jeu
    global main_joueur
    global main_croupier
    global assurance_prise
    global assurance_gagnante
    global bj21
    consequence = 0
    if bj21 == 1:
        if debug == 1:
            print('taille main croupier', len(main_croupier), main_croupier,
                  score(main_croupier))
        if (score(main_croupier) == 21) and (len(main_croupier) == 2):
            resultat_label['text'] = 'Vous avez le même score que le ' + \
                'Dealer: ex aequo'
            consequence = 'egalite'
        else:
            resultat_label['text'] = 'BLACKJACK: vous êtes le vainqueur'
            consequence = 'Blackjack'
    elif action == 'surrender':
        resultat_label['text'] = 'Vous avez abandonné'
        consequence = 'ff'
    elif score(main_joueur) > 21:
        resultat_label['text'] = 'Votre main vaut plus que 21, vous' + \
            ' avez perdu.'
    elif score(main_joueur) <= 21:
        if score(main_croupier) > 21:
            resultat_label['text'] = 'Le Dealer a dépassé 21: vous ' +\
                'avez gagné !'
            consequence = 'win'
        elif score(main_croupier) <= 21:
            if (score(main_croupier) == 21) and (len(main_croupier) == 2):
                if debug == 1:
                    print('ok')
                resultat_label['text'] = 'Le Dealer a fait un BlackJack !\n'
                if score(main_joueur) == 21 and len(main_joueur) == 2:
                    resultat_label['text'] += 'Vous avez également un ' +\
                        'BlackJack, votre mise est remboursée \n'
                    consequence = 'egalite'
                if assurance_prise == 1:
                    resultat_label['text'] += 'Vous avez payé l\'' +\
                        'assurance, vous gagnez deux fois le montant de ' +\
                        'votre assurance \n'
                    assurance_gagnante = 1
                if score(main_joueur) != 21 or len(main_joueur) != 2:
                    resultat_label['text'] += ' La main du Dealer ' +\
                        'est meilleure, vous avez perdu'
            elif score(main_joueur) < score(main_croupier):
                resultat_label['text'] = 'Le Dealer a un meilleur ' + \
                    'score, vous avez perdu.'
            elif score(main_joueur) == score(main_croupier):
                resultat_label['text'] = 'Vous avez le même score ' + \
                    'que le Dealer: ex aequo'
                consequence = 'egalite'
            elif score(main_joueur) > score(main_croupier):
                resultat_label['text'] = 'Vous avez un meilleur score que ' + \
                    'le Dealer: vous avez gagné !'
                consequence = 'win'
    annonce = f'Votre score: {str(score(main_joueur))} \n Score' + \
        f' du Dealer: {str(score(main_croupier))}'
    resultat_final['text'] = annonce
    resultat_final.grid(column=5+len(main_croupier), row=1)
    resultat_label.grid(column=5+len(main_croupier), row=2)
    if debug == 1:
        print(score(main_joueur), score(main_croupier))
        print('fin manche dans resultat')
    fin_manche()
    calcul_gain(consequence, assurance_gagnante)


def calcul_gain(consequence=0, assurance_gagnante=0):
    global mise_totale
    global money
    if debug == 1:
        print('début calcul gain')
    gain = 0
    gain_assurance = 0
    if consequence != 0 and consequence != 'ff':
        if debug == 1:
            print('mise remboursée')
        money += mise_totale
        argent['text'] = f'Crédits: {int(money)}'
    if consequence == 'Blackjack':
        gain += mise_totale * 1.5
    if consequence == 'ff':
        gain += mise_totale // 2
    if consequence == 'win':
        gain += mise_totale
    if assurance_gagnante == 1:
        gain_assurance += mise_totale
    gain = int(gain)
    if gain != 0:
        argent['text'] = f'Crédits: {int(money)} + {int(gain)}'
    else:
        argent['text'] = f'Crédits: {int(money)}'
    if gain_assurance != 0:
        argent['text'] += f' + {int(gain_assurance)}'
    money += gain + gain_assurance
    test_dette()
    if debug == 1:
        print('fin calcul gain')


def rejouer():
    global mise_totale
    global coupe
    global cc
    global cj
    nb_paquet['text'] = 'Nombre de cartes restantes dans le paquet:' +\
        f' {str(len(paquet))} \nNombre de cartes restantes dans la' +\
        f'défausse: {str(len(defausse))}'
    if len(defausse) >= coupe:
        for element in defausse:
            paquet.append(defausse[0])
            del defausse[0]
            nb_paquet['text'] = 'Nombre de cartes restantes dans le paquet:' +\
                f' {str(len(paquet))} \nNombre de cartes restantes dans la' +\
                f'défausse: {str(len(defausse))}'
        random.shuffle(paquet)
    bouton_rejouer.grid_forget()
    apparition_mise()
    bouton_donne_initiale.grid(column=2, row=3)
    mise_totale = 0
    mise_texte['text'] = "Mise totale: "
    argent['text'] = f'Crédits: {str(money)}'
    cc1.delete('all')
    cc2.delete('all')
    cj1.delete('all')
    cj2.delete('all')
    for i in range(2, 14):
        cc[i].grid_forget()
        cj[i].grid_forget()
    resultat_label.grid_forget()
    resultat_final.grid_forget()
    stand_label.grid_forget()
    assurance_valeur.grid_forget()
    if money == 0:
        emprunt.grid(column=9, row=5)
        term.grid(column=10, row=5)
        banque.grid(column=9, columnspan=5, row=3)


def quitter(event):
    root.destroy()


def ordre_boutons2(event):
    if event.widget == bouton_melanger:
        bouton_melanger.grid_forget()
        bouton_donne_initiale.grid(column=2, row=3)
        apparition_mise()


def ordre_boutons3(event):
    if event.widget == bouton_donne_initiale:
        if mise_totale != 0:
            erreur.grid_forget()
            if debug == 1:
                print('ok')
            donne_initiale()
        else:
            bouton_donne_initiale.grid_forget()
            erreur.grid(column=2, row=3)
            erreur.lift()
            erreur['text'] = 'Veuillez miser pour jouer'


def apparition_bouton_joueur():
    bouton_hit.grid(column=2, row=3)
    stand_bouton.grid(column=2, row=5)
    bouton_surrender.grid(column=2, row=6)
    if money >= mise_totale:
        bouton_double_down.grid(column=2, row=4)


def apparition_mise():
    jeton_blanc.grid(column=4, row=10)
    jeton_bleu.grid(column=3, row=10)
    jeton_rouge.grid(column=2, row=10)
    jeton_noir.grid(column=6, row=10)
    jeton_vert.grid(column=1, row=10)
    jeton_tapis.grid(column=7, row=10)
    miser.grid(column=0, row=10)
    mise_texte.grid(column=0, row=9)


def disparition_mise():
    for i in range(len(jeton_et_mise)):
        jeton_et_mise[i].grid_forget()


def mise(montant_mise):
    global mise_totale
    global money
    if (money - montant_mise) >= 0:
        erreur.grid_forget()
        bouton_donne_initiale.grid(column=2, row=3)
        mise_totale += montant_mise
        money -= montant_mise
        mise_texte['text'] = f"Mise totale: {str(mise_totale)}"
        argent['text'] = f'Crédits: {str(money)}'


def emprunter(event):
    global money
    if event.widget == emprunt:
        term.grid_forget()
        emprunt.grid_forget()
        valid.grid(column=9, columnspan=5, row=6)
        my_entry3.grid(column=9, columnspan=5, row=5)


def validd(event):
    global money
    global dette
    if event.widget == valid:
        money += int(my_entry3.get())
        argent['text'] = f'Crédits: {str(money)}'
        dette += int(my_entry3.get())
        dette_label['text'] = f'Vous avez {str(dette)} € de dettes envers ' +\
            'la banque'
        dette_label.grid(column=9, columnspan=5, row=3)
        for i in range(len(canvas_emprunt)):
            canvas_emprunt[i].grid_forget()


def test_dette():
    global money
    global dette
    if debug == 1:
        print('dette remboursable')
    if money == 2*dette:
        money = money-dette
        dette = dette-int(my_entry3.get())
        argent['text'] = f'Crédits: {str(money)}'
        if debug == 1:
            print('dette remboursée')
        if dette == 0:
            dette_label['text'] = 'Vos dettes sont remboursées'
            dette_label['fg'] = 'red'
            dette_label.after(5000, lambda: dette_label.grid_forget())


"""Fenêtres"""

accueil = tkinter.Tk()
accueil.title('Menu BlackJack 21')
accueil.geometry('700x600')


"""Graphismes"""

"""1ère fenètre"""

accueil.configure(bg='red')
bj = tkinter.Label(text='BLACK JACK', bg='red', fg='gold',
                   font=('helvetica', 50))
bj.pack()

play = tkinter.Button(accueil, text='Play',
                      width=15, height=5, font=('helvetica', 20),
                      command=fenêtre)

play.pack()

play.bind('<Button-1>', debut)

username = tkinter.Label(accueil, text="Username:",
                         font=('helvetica', 10), fg='black')
username.pack()

my_entry = tkinter.Entry(accueil)
my_entry.pack()

credit = tkinter.Label(accueil, text="Crédit:", font=('helvetica', 10),
                       fg='black')
credit.pack()

my_entry2 = tkinter.Entry(accueil)
my_entry2.pack()

"""graphisme fenêtre"""

cartes1 = tkinter.Canvas(accueil, width=100, height=160, bg='green')
cartes2 = tkinter.Canvas(accueil, width=100, height=160, bg='green')
cartes1.pack(side='left', anchor='n')
cartes2.pack(side='left', anchor='n')

cartes3 = tkinter.Canvas(accueil, width=100, height=160, bg='green')
cartes4 = tkinter.Canvas(accueil, width=100, height=160, bg='green')
cartes3.pack(side='right', anchor='n')
cartes4.pack(side='right', anchor='n')

jetonnoir = tkinter.Canvas(accueil, bg='red', width=60, height=60,
                           relief='raised', borderwidth=0,
                           highlightthickness=0)
jetonnoir.create_oval(1, 1, 55, 55, width=3, outline='gray19', fill='gray14')
jetonnoir.pack(side='left', anchor='center')
jetonnoir.place(bordermode='outside', relx=0.05, rely=0.1, anchor='nw')

jetonbleu = tkinter.Canvas(accueil, bg='red', width=60, height=60,
                           relief='raised', borderwidth=0,
                           highlightthickness=0)
jetonbleu.create_oval(1, 1, 55, 55, width=3, outline='blue4', fill='navy')
jetonbleu.pack(side='left', anchor='center')
jetonbleu.place(bordermode='outside', relx=0, rely=0, anchor='nw')

jetonblanc = tkinter.Canvas(accueil, bg='red', width=60, height=60,
                            relief='raised', borderwidth=0,
                            highlightthickness=0)
jetonblanc.create_oval(1, 1, 55, 55, width=3,
                       outline='light grey', fill='mint cream')
jetonblanc.pack(side='left', anchor='n')
jetonblanc.place(bordermode='outside', relx=0.1, rely=0, anchor='nw')

accueil.mainloop()


"""2ème fenètre"""


root = tkinter.Tk()
root.title('Blackjack 21')
"""root.state('zoomed')"""

root.geometry = accueil.geometry
root.configure(bg="dark green")


def dir_regles(event):
    if event.widget == bouton_rdj:
        règle = tkinter.Tk()
        règle.title('Règle du jeu')
        règle.geometry = accueil.geometry
        règle.configure(bg='white')
        titre = tkinter.Label(règle, text='REGLE DU BLACKJACK 21\n',
                              bg='white', fg='black', font=('helvetica', 23))
        titre.pack(side='top')
        jeu = tkinter.Label(règle, text='Le BlackJack se joue avec 312 ' +
                            'cartes. 6 jeux de 52 cartes.\n',
                            bg='white', fg='gray13', font=('helvetica', 15))
        jeu.pack(side='top')

        valeurs_cartes = tkinter.Label(règle, text='Valeur des cartes',
                                       bg='white', fg='black',
                                       font=('helvetica', 17))
        valeurs_cartes.pack(side='top')

        points_cartes = tkinter.Label(règle, text='de 2 à 9 : valeur '
                                      'nominale de la carte\n de 10 au roi' +
                                      '(surnommées « bûche ») : 10 points' +
                                      '\n as : 1 ou 11 points (au choix ' +
                                      'du joueur)\n Le but du joueur ' +
                                      'est d’obtenir exactement 21 points.\n',
                                      bg='white', fg='gray13',
                                      font=('helvetica', 15))
        points_cartes.pack(side='top')

        deroulement_partie = tkinter.Label(règle, text='Déroulement d’une ' +
                                           'partie', bg='white', fg='black',
                                           font=('helvetica', 17))
        deroulement_partie.pack(side='top')

        deroulement_partie_texte = tkinter.Label(règle, text='Au début du ' +
                                                 'jeu, 2 cartes sont ' +
                                                 'distribuées au Player.\n' +
                                                 'A chaque tour, le Player ' +
                                                 'peut prendre des actions.' +
                                                 '\n Le Dealer pioche ' +
                                                 'jusqu’à atteindre 17 '
                                                 'points minimum.\n',
                                                 bg='white', fg='grey13',
                                                 font=('helvetica', 15))
        deroulement_partie_texte.pack(side='top')

        gagnant_texte = tkinter.Label(règle, text='Comment gagner ?',
                                      bg='white', fg='black',
                                      font=('helvetica', 17))
        gagnant_texte.pack(side='top')

        gagnanttexte = tkinter.Label(règle, text='Si le Dealer possède une ' +
                                     'main supérieure à 21, vous gagnez la ' +
                                     ' partie en cours. Vous gagnez 150% ' +
                                     'de votre mise.\n Si le Dealer a une ' +
                                     'main comprise entre 17 et 21 points, ' +
                                     'et que vous avez un score supérieur ' +
                                     'alors vous gagnez.\n Si vous avez ' +
                                     'une main supérieure à 21 points, ' +
                                     'vous perdez votre mise.\n En cas ' +
                                     'd’égalité, vous serez remboursé.\n',
                                     bg='white', fg='gray13',
                                     font=('helvetica', 15))

        gagnanttexte.pack(side='top')

        action = tkinter.Label(règle, text='Actions', bg='white',
                               fg='black', font=('helvetica', 17))
        action.pack(side='top')
        action_texte = tkinter.Label(règle, text='Hit : vous piochez autant ' +
                                     'de cartes souhaitées pour se ' +
                                     'rapprocher de 21\n Stand : le Player ' +
                                     'conserve ses cartes, il annonce s’il ' +
                                     'reste ou s’il s’arrête\n Double Down ' +
                                     ': le Player double sa mise, mais ' +
                                     'ne peut recevoir qu’une seule carte\n' +
                                     'Surrender : le Player abandonne et ' +
                                     'perd la moitié de sa mise',
                                     bg='white', fg='gray13',
                                     font=('helvetica', 15))
        action_texte.pack(side='top')

        def revenir(event):
            if event.widget == bouton_revenir:
                règle.destroy()
        bouton_revenir = tkinter.Button(règle, text='Revenir au jeu', fg='red')
        bouton_revenir.pack()
        bouton_revenir.bind('<Button-1>', revenir)
    règle.mainloop()


erreur = tkinter.Label(root, text='', font=('helvetica', 10),
                       fg='black')

cartes = tkinter.Canvas(root, width=66, height=100, bg='#55AA55')
dos_carte(cartes, 'cartes')
cartes.grid(column=2, row=3)


"""Boutons"""

bouton_rdj = tkinter.Button(root, text='Comment jouer ?',
                            width=13, height=2, fg='navy')
bouton_rdj.grid(column=0, row=0)
bouton_rdj.bind('<Button-1>', dir_regles)

bouton_quitter = tkinter.Button(text='Quitter la partie', fg='red')
bouton_quitter.grid(column=2, row=11)
bouton_quitter.bind('<Button-1>', quitter)

bouton_melanger = tkinter.Button(
    text='Mélanger', fg='blue', command=random.shuffle(paquet))
bouton_melanger.grid(column=2, row=3)

bouton_donne_initiale = tkinter.Button(
    text='Donne initiale', fg="blue")

bouton_rejouer = tkinter.Button(
    text='Rejouer', fg="blue", command=rejouer)

bouton_melanger.bind('<Button-1>', ordre_boutons2)

bouton_hit = tkinter.Button(bg='white', text='Hit')
bouton_hit.bind('<Button-1>', lambda e: hit(main_joueur, 'main_joueur'))

bouton_double_down = tkinter.Button(bg='white', text='Double Down')
bouton_double_down.bind('<Button-1>', lambda e: doubble_down(
    main_joueur))

stand_bouton = tkinter.Button(bg='salmon', text='Stand')
stand_bouton.bind(
    "<Button-1>", lambda e: stand(main_joueur))

bouton_surrender = tkinter.Button(bg='red', text='Surrender')
bouton_surrender.bind('<Button-1>', lambda e: surrender())

bouton_joueur = [bouton_hit, stand_bouton, bouton_surrender,
                 bouton_double_down]

bouton_donne_initiale.bind('<Button-1>', ordre_boutons3)

texte_assurance = tkinter.Label(text='')

bouton_oui_assurance = tkinter.Button(text='Oui')
bouton_non_assurance = tkinter.Button(text='Non')

bouton_oui_assurance.bind(
    '<Button-1>', lambda e: reponse_assurance(reponse='oui'))
bouton_non_assurance.bind(
    '<Button-1>', lambda e: reponse_assurance(reponse='non'))

assurance_valeur = tkinter.Label(text='')


valid = tkinter.Button(root, text='valider l\'emprunt',
                       bg='dark green', fg='black')
valid.bind('<Button-1>', validd)
banque = tkinter.Label(root, text='Vous êtes à cours de crédit',
                       font=('helvetica', 15), bg='dark green',
                       fg='red')
emprunt = tkinter.Button(root, text='Emprunt')
emprunt.bind('<Button-1>', emprunter)
term = tkinter.Button(root, text='Terminer')
term.bind('<Button-1>', quitter)

eprnt = tkinter.Label(root, text='Combien souhaitez-vous ' +
                      'emprunter ?', fg='black',
                      bg='dark green')
my_entry3 = tkinter.Entry(root)

canvas_emprunt = [my_entry3, valid, banque, eprnt]

dette_label = tkinter.Label(root, text='', bg='dark green', fg='black',
                            font=('helvetica', 10))

""" mise du jeu """


mise_totale = 0
mise_valeur = {'jeton_vert': 1, 'jeton_rouge': 10, 'jeton_bleu': 25,
               'jeton_blanc': 50, 'jeton_noir': 100, 'tapis': 'money'}

"""le but de ma fonction serait d'appuyer sur le bouton mise, pour faire \
    apparaitre des boutons sur les jetons, qui incrémente la valeur de la mise\
        totale."""

argent = tkinter.Label(root, text='Crédits: '+str(money), bg='dark green',
                       fg='white')
argent.grid(column=0, row=8)

mise_texte = tkinter.Label(
    root, text='Mise totale: ', bg='dark green', fg='white')

miser = tkinter.Label(root, text="Cliquez pour miser:",
                      bg='dark green', fg='white')

jeton_tapis = tkinter.Canvas(root, bg='dark green', width=30, height=30,
                             relief='raised', borderwidth=0,
                             highlightthickness=0)
jeton_tapis.create_polygon(1, 1, 25, 25, width=3,
                           fill='tan4')
jeton_tapis.create_text(13, 13, text='tapis',
                        font=('helvetica', 8), fill='white')
jeton_blanc = tkinter.Canvas(root, bg='dark green', width=30, height=30,
                             relief='raised', borderwidth=0,
                             highlightthickness=0)
jeton_blanc.create_oval(1, 1, 25, 25, width=3,
                        outline='chartreuse4', fill='green4')

jeton_blanc.create_text(13, 13, text='50', font=('helvetica', 8), fill='white')

jeton_bleu = tkinter.Canvas(root, bg='dark green', width=30, height=30,
                            relief='raised', borderwidth=0,
                            highlightthickness=0)
jeton_bleu.create_oval(1, 1, 25, 25, width=3, outline='blue4', fill='navy')
jeton_bleu.create_text(13, 13, text='25', font=('helvetica', 8), fill='white')

jeton_rouge = tkinter.Canvas(root, bg='dark green', width=30, height=30,
                             relief='raised', borderwidth=0,
                             highlightthickness=0)
jeton_rouge.create_oval(1, 1, 25, 25, width=3, outline='brown4', fill='red')
jeton_rouge.create_text(13, 13, text='10', font=('helvetica', 8), fill='white')

jeton_noir = tkinter.Canvas(root, bg='dark green', width=30, height=30,
                            relief='raised', borderwidth=0,
                            highlightthickness=0)
jeton_noir.create_oval(1, 1, 25, 25, width=3, outline='gray19', fill='gray14')
jeton_noir.create_text(13, 13, text='100', font=('helvetica', 8), fill='white')

jeton_vert = tkinter.Canvas(root, bg='dark green', width=30, height=30,
                            relief='raised', borderwidth=0,
                            highlightthickness=0)
jeton_vert.create_oval(1, 1, 25, 25, width=3, outline='light grey',
                       fill='mint cream')
jeton_vert.create_text(13, 13, text='1', font=('helvetica', 8), fill='black')


jeton_vert.bind('<Button-1>', lambda e: mise(1))

jeton_rouge.bind('<Button-1>', lambda e: mise(10))

jeton_bleu.bind('<Button-1>', lambda e: mise(25))

jeton_blanc.bind('<Button-1>', lambda e: mise(50))

jeton_noir.bind('<Button-1>', lambda e: mise(100))

jeton_tapis.bind('<Button-1>', lambda e: mise(money))

jeton_et_mise = [jeton_vert, jeton_blanc, jeton_bleu, jeton_rouge, jeton_noir,
                 jeton_tapis, miser]

'''interface graphique'''


# interface emplacement des cartes 1 et 2 du joueur
cj1 = tkinter.Canvas(root, width=66, height=100, bg='#55AA55')
cj1.grid(column=1, row=7)
cj2 = tkinter.Canvas(root, width=66, height=100, bg='#55AA55')
cj2.grid(column=3, row=7)

# interface emplacement des cartes 1 et 2 du croupier
cc1 = tkinter.Canvas(root, width=66, height=100, bg='#55AA55')
cc1.grid(column=1, row=1)
cc2 = tkinter.Canvas(root, width=66, height=100, bg='#55AA55')
cc2.grid(column=3, row=1)

# texte qui définit le côté du croupier
labelc = tkinter.Label(root, text="Dealer ", font=(
    "helvetica", "15"), bg="dark green", fg="black")
labelc.grid(column=0, row=1)

# texte qui définit le côté du joueur
labelj = tkinter.Label(root, text=name, font=("helvetica", "15"),
                       bg="dark green", fg="black")
labelj.grid(column=0, row=7)

cj3 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj4 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj5 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj6 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj7 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj8 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj9 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj10 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj11 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj12 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj13 = tkinter.Canvas(root, width=66, height=100, bg='white')
cj14 = tkinter.Canvas(root, width=66, height=100, bg='white')

cc3 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc4 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc5 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc6 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc7 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc8 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc9 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc10 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc11 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc12 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc13 = tkinter.Canvas(root, width=66, height=100, bg='white')
cc14 = tkinter.Canvas(root, width=66, height=100, bg='white')

cj = [cj1, cj2, cj3, cj4, cj5, cj6, cj7, cj8, cj9, cj10, cj11, cj12, cj13,
      cj14]
cc = [cc1, cc2, cc3, cc4, cc5, cc6, cc7, cc8, cc9, cc10, cc11, cc12, cc13,
      cc14]

stand_label = tkinter.Label(root, bg='dark green', fg='black',
                            text="<<Je m'arrête>>",
                            font=("helvetica", "15"))

resultat_final = tkinter.Label(
    root, text='annonce', bg='dark green', fg='red')
resultat_label = tkinter.Label(
    root, text='', bg='dark green', fg='yellow')

nb_paquet = tkinter.Label(
    root, text='Nombre de cartes restantes dans le paquet:' +
    f' {str(len(paquet))} \nNombre de cartes restantes dans la' +
    f'défausse: {str(len(defausse))}', bg='dark green')
nb_paquet.grid(column=10, row=0)

root.mainloop()
